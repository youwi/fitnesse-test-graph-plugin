<h2></h2>
<script src="files/fitnesse/javascript/echarts.min.js"></script>

<div id="main" style="min-width: 1000px;height:300px;margin-bottom: 20px;  border: 1px solid;"></div>
<div id="wrongTable" style="width: 1000px;"></div>
<button id="clearAll" onclick="clearAllKey()">ClearAll</button>
<button id="runAllError" onclick="runAllErr()">RunAllEr</button>
<div id="summary"></div>
<script>
    var testHistoryString =${TestHistoryString};

    var datax = []
    var dataFail = []
    var dataAll = []

    if (testHistoryString != null) {
        var src = testHistoryString.testResultMap
        for (var key in src) {
            datax.push(key)
        }
        // datax.sort() //sort by string
        datax.sort((a, b) => {
            return new Date(a).getTime() - new Date(b).getTime()
        })
        for (var key of datax) {
            dataAll.push(src[key].right + src[key].wrong)
            dataFail.push(src[key].wrong)
        }
        datax = datax.map((item) => {
            var now = new Date(item)
            var time = ""
            time = [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/');
            time += " " + [now.getHours(), now.getMinutes(), now.getSeconds()].join(":")
            return time;
        })
    }
    //delete some cancel Tests
    for (var i = 1; i < datax.length - 1; i++) {
        if (dataAll[i] < dataAll[i + 1] / 2 && dataAll[i] < dataAll[i - 1] / 2) {
            datax.splice(i, 1)
            dataFail.splice(i, 1)
            dataAll.splice(i, 1)
            i--;
        }
    }


    option = {
        title: {
            text: 'TimeLine'
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985'
                }
            }
        },
        legend: {
            data: ['All Cases', 'Fail Cases']
        },
        toolbox: {
            feature: {
                saveAsImage: {}
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: [
            {
                type: 'category',
                boundaryGap: false,
                data: datax
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: 'Fail Cases',
                smooth: true,
                type: 'line',
                areaStyle: {normal: {color: "red"}},
                data: dataFail
            },
            {
                name: 'All Cases',
                type: 'line',
                smooth: true,
                areaStyle: {normal: {color: "rgba(216, 201, 205, 0.43)"}},
                data: dataAll
            }
        ]
        , dataZoom: [{
            type: 'inside',
            start: 0,
            end: 100
        }, {
            start: 0,
            end: 100,
            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
            handleSize: '80%',
            handleStyle: {
                color: '#fff',
                shadowBlur: 3,
                shadowColor: 'rgba(0, 0, 0, 0.6)',
                shadowOffsetX: 2,
                shadowOffsetY: 0
            }
        }],
    };

    var myChart = echarts.init(document.getElementById('main'));
    myChart.setOption(option);


    function initTableWithData(data) {
        let eData=filterError(data);
        var tableDiv = document.getElementById('wrongTable');
        tableDiv.innerHTML = "";
        tableDiv.append(createTable(eData))

        let summaryDiv=document.getElementById("summary");
        summaryDiv.innerText=`错误总数为: ${eData.length}`
    }
    /**
     * 统计出错误的结果行.只要错误的
     */
    function filterError(data) {
        let out = []
        Object.keys(data).map(key => {
            if (data[key].wrong > 0) {
                let node = {pageName: "", wrong: 0, user: "", ...data[key], key}
                out.push(node)
            }
        })
        out = out.sort((a, b) => a.key.localeCompare(b.key));
        return out;
    }


    function domCtd(key, srcDom) {
        //添加删除按钮
        var cellDelete = document.createElement('td');
        var a = document.createElement("a");
        a.text = "delete"
        a.className = "delete-link"
        a.onclick = () => deleteByKey(key);
        cellDelete.appendChild(a)
        srcDom.appendChild(cellDelete)

    }

    function domCtextarea(key, srcDom, oriValue) {
        //添加评论按钮,鼠标移开时保存
        var cellDelete = document.createElement('td');
        var a = document.createElement("textarea");
        a.placeHolder = "添加说明"
        a.className = "submit-textarea"
        a.value = oriValue || "";
        a.rows=a.value.split("\n").length;
        a.onchange = (e) => markByKey(key, e.target.value);
        a.spellcheck=false;
        //自动自动换行
        a.onkeydown=(e)=>{
            if(e.key==="Enter")
                a.rows=e.target.value.split("\n").length+1
        };
        a.onkeyup=(e)=>{a.rows=e.target.value.split("\n").length};

        cellDelete.appendChild(a)
        cellDelete.className = "td-submit"
        srcDom.appendChild(cellDelete)
    }


    function createTable(tableData) {
        var table = document.createElement('table');
        var tableBody = document.createElement('tbody');

        tableData.forEach(function (rowData) {
            var row = document.createElement('tr');
            var msg = rowData.msg;
            delete rowData.msg;//为了后面的消息能正常显示

            Object.values(rowData).forEach(function (cellData) {
                var cell = document.createElement('td');
                var link = document.createElement("a")
                link.href = cellData;
                link.text = cellData;
                cell.appendChild(link);
                row.appendChild(cell);
            });
            domCtd(rowData.key, row)
            domCtextarea(rowData.key, row, msg)

            tableBody.appendChild(row);

        });

        table.appendChild(tableBody);
        return table;
    }


    function initTable() {
        fetch("?testStatus")
                .then(resp => resp.json())
                .then(data => {
                    initTableWithData(data)
                })
    }
    /**
     * 删除无用的key
     */
    function deleteByKey(key) {
        fetch("?testStatus&deleteKey=" + key).then(resp => resp.json())
                .then(json => {
                    initTableWithData(json);
                    Toast("这条记录已经删除",2000)
                })
    }

    function clearAllKey(key) {
        fetch("?testStatus&clear=" + key).then(resp => resp.json())
                .then(json => {
                    initTableWithData(json);
                    Toast("清空全部",2000)
                })
    }
    function runAllErr(key) {
        fetch("?testStatus")
                .then(resp => resp.json())
                .then(async(data) => {
                   let eData= filterError(data);
                   let i=0;
                   for(let item of eData){
                        i++;
                        let response=await fetch(window.location.origin+"/"+item.key+"?test");
                        let text=await response.text();
                        //<strong>Test Pages:</strong> 1 right, 1 wrong, 0 ignored, 0 exceptions

                        Toast(item.key +" ("+i+") "+isPassText(text),2000)
                   }
                })
    }


    function isPassText(text) {
        if(  text.indexOf("0 wrong, 0 ignored, 0 exceptions") >-1){
            return "通过"
        }
        return '失败'
    }

    /**
     * 备注调试消息,加一个字段用于备注消息
     * @param key
     * @param msg
     */
    function markByKey(key, msg) {
        fetch("?testStatus&key=" + key + "&msg=" + encodeURI(msg)).then(resp => resp.json())
                .then(json => {
                    initTableWithData(json);
                })
    }

    /**
     * 生成一个toast
     * @param msg
     * @param duration
     * @constructor
     */
    function Toast(msg,duration){
        Toast._index=Toast._index||0;
        Toast._index++;
        if(Toast._index>4) Toast._index=0;
        let pix=Toast._index*40; //设置上下偏移量

        duration=isNaN(duration)?3000:duration;
        var m = document.createElement('div');
        m.innerHTML = msg;
        m.style.cssText="max-width:60%;min-width: 150px;" +
                "padding:0 14px;height: 40px;" +
                "color: rgb(255, 255, 255);line-height: 40px;" +
                "text-align: center;border-radius: 4px;position: fixed;" +
                "top: calc(50% + "+pix+"px);" +
                "left: 50%;" +
                "transform: translate(-50%, -50%);" +
                "z-index: 999999;background: rgba(0, 0, 0,.7);font-size: 16px;";
        document.body.appendChild(m);
        setTimeout(function() {
            var d = 0.5;
            m.style.webkitTransition = '-webkit-transform ' + d + 's ease-in, opacity ' + d + 's ease-in';
            m.style.opacity = '0';
            setTimeout(function() { document.body.removeChild(m) }, d * 1000);
        }, duration);
    }

    initTable();


</script>

<style>

    .delete-link {
        cursor: pointer;
    }

    #wrongTable td {
        max-width: 50vw;
        overflow: hidden;
    }

    #wrongTable td:first-child {
        max-width: 200px;
        overflow: hidden;
        white-space: nowrap;
    }

    .td-submit {
        padding: 0px;
    }

    .td-submit textarea {
        padding: 5px 5px;
        display: block;
        min-height: 30px;
        border: none;
    }
</style>